     package com.croftsoft.core.util.id;

     import com.croftsoft.core.lang.NullArgumentException;

     /*********************************************************************
     * An Id implementation backed by a String.
     *
     * @version
     *   2003-06-07
     * @since
     *   2000-01-16
     * @author
     *   <a href="http://www.croftsoft.com/">David Wallace Croft</a>
     *********************************************************************/

     public class  StringId
       implements Id
     //////////////////////////////////////////////////////////////////////
     //////////////////////////////////////////////////////////////////////
     {

     private static final long  serialVersionUID = 0L;

     //

     private final String  s;

     //////////////////////////////////////////////////////////////////////
     // constructor method
     //////////////////////////////////////////////////////////////////////

     /*********************************************************************
     * Main constructor.
     *
     * @throws NullArgumentException
     *
     *   If argument is null.
     *********************************************************************/
     public  StringId ( String  s )
     //////////////////////////////////////////////////////////////////////
     {
       NullArgumentException.check ( this.s = s );
     }

     //////////////////////////////////////////////////////////////////////
     // accessor method
     //////////////////////////////////////////////////////////////////////

     public String  getS ( ) { return s; }

     //////////////////////////////////////////////////////////////////////
     // Id interface methods
     //////////////////////////////////////////////////////////////////////

     public boolean  equals ( Object  other )
     //////////////////////////////////////////////////////////////////////
     {
       if ( other == null ) return false;

       if ( !getClass ( ).equals ( other.getClass ( ) ) ) return false;

       return s.equals ( ( ( StringId ) other ).s );
     }

     public int  hashCode ( )
     //////////////////////////////////////////////////////////////////////
     {
       return s.hashCode ( );
     }

     public Object  clone ( )
     //////////////////////////////////////////////////////////////////////
     {
       try
       {
         return super.clone ( );
       }
       catch ( CloneNotSupportedException  ex )
       {
         // This will never happen.

         throw new RuntimeException ( );
       }
     }

     //////////////////////////////////////////////////////////////////////
     // Other methods
     //////////////////////////////////////////////////////////////////////

     /*********************************************************************
     * return s;
     *********************************************************************/
     public String  toString ( )
     //////////////////////////////////////////////////////////////////////
     {
       return s;
     }

     //////////////////////////////////////////////////////////////////////
     //////////////////////////////////////////////////////////////////////
     }
